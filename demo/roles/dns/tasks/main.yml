---
  - name: Find ifcfg files
    command: find /etc/sysconfig/network-scripts/ -type f -name "ifcfg-e*"
    register: eths

  - name: Ensure SELinux is set to disabled mode
    lineinfile:
      path: /etc/sysconfig/selinux
      regexp: '^SELINUX='
      line: SELINUX=disabled

# as per documentation here regarding dns changes to dhcp clients system running NetworkManager
# https://access.redhat.com/solutions/7412

  - name: set DNS resolution in ifcfg file
    blockinfile:
      dest: "{{ item }}"
      block: |
        PEERDNS=no
    with_items: "{{ eths.stdout_lines }}"

  - name: set DNS resolution in ifcfg file
    blockinfile:
      dest: /etc/NetworkManager/NetworkManager.conf 
      block: |
        dns=none
    register: dnschange

  - name: restart NetworkManager
    service:
      name: NetworkManager
      state: restarted
    when: dnschange.changed

#  - name: Replace search domain entry
#    lineinfile:
#      path: /etc/resolv.conf
#      regexp: '^search'
#      line: search redhat.local ap-southeast.compute.internal

#  - name: Replace nameserver entry
#    lineinfile:
#      path: /etc/resolv.conf
#      regexp: '^nameserver'
#      line: nameserver 172.31.20.182

#  - name: set DNS resolution in resolv.conf 
#    blockinfile:
#      dest: /etc/resolv.conf 
#      block: |
#        search "{{ ad_domain }} ec2.internal"
#        nameserver 172.31.20.182

#  - name: restart NetworkManager
#    service:
#      name: NetworkManager
#      state: restarted
#    when: dnschange.changed

  - setup:

  - set_fact:
      new_hostname: "{{ ansible_hostname | regex_findall('\\b(?:[0-9]{1,3}\\-){3}[0-9]{1,3}\\b') }}"

  - debug:
      var: ansible_hostname

  - debug:
      var: new_hostname 

  - name: set DNS resolution in resolv.conf
    blockinfile:
      dest: /etc/resolv.conf
      block: |
        search "{{ ad_domain }} ec2.internal"
        nameserver 172.31.20.182

# Now to configure the hostname so it does not exceed 15 characters
  - name: Set new hostname
    command:
      argv:
        - /bin/hostnamectl
        - set-hostname 
        - "{{ new_hostname }}"

  #- command:
  #   name: "{{ new_hostname }}"

  - name: Stop cloud init resetting the hostname upon reboot 
    lineinfile:
      path: /etc/cloud/cloud.cfg
      regexp: ' - set_hostname'
      line: '# - set_hostname'

  - name: Stop cloud init updating the hostname upon reboot 
    lineinfile:
      path: /etc/cloud/cloud.cfg
      regexp: ' - update_hostname'
      line: '# - update_hostname'

  # Idempotent way to build a /etc/hosts file with Ansible using your Ansible hosts inventory for a source.
  # Will include all hosts the playbook is run on.
  # Credits to rothgar: https://gist.github.com/rothgar/8793800
#  - name: Build hosts file (backups will be made)
#    lineinfile: >
#      dest=/etc/hosts
#      regexp='{{ hostvars[item].ansible_hostname }}$'
#      line='{{ hostvars[item].ansible_default_ipv4.address }} {{ item }} {{ hostvars[item].ansible_hostname }}'
#      state=present
#      backup=yes
#    when: hostvars[item].ansible_default_ipv4.address is defined
#    with_items: groups['all']
